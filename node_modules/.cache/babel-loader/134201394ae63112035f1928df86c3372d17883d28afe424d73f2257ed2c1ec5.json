{"ast":null,"code":"import axios from'axios';import{getUserCookie}from'../cookie';//const staticServerUri = process.env.REACT_APP_PATH || \"\"; //배포환경의 백엔드 api 서버(크램폴린 환경)\nexport const instance=axios.create({// baseURL을 하드코딩 하는 것은 Bad code -> env 환경변수에 담아 이용\n// 왜? 1. 동적인 환경 관리(개발과 production 단계에서의 사용 api주소가 다를 수 있다.), 2. 보안, 3. 유지 보수 및 배포에 용이(소스코드 수정 없이 env만 수정)\n//baseURL: \"http;//localhost:8080\" // 로컬 api 서버\nbaseURL:process.env.REACT_APP_API_PATH,// 환경변수 api 서버\n//baseURL: staticServerUri + \"/api\", //배포환경의 백엔드 api 서버(크램폴린 환경)\n// 꼭 timeout 세팅을 해줘야 한다. 무한정 요청을 기다릴 수 없기 때문\ntimeout:1000*10,headers:{\"Content-Type\":\"application/json\",\"Referrer-Policy\":\"strict-origin-when-cross-origin\"}});// Axios의 인터셉터를 사용하여 모든 요청 전에 실행될 함수를 등록합니다.\n// 요청 전에 실행되어 헤더에 인증 토큰을 추가하는 역할을 수행합니다.\ninstance.interceptors.request.use(config=>{const token=getUserCookie().token;if(token){config.headers[\"Authorization\"]=`${token}`;// `Bearer ${token}`;\n}return config;});// response 단에서 에러 처리\n// 참고 : use 명령은 middleware 처럼 동작\ninstance.interceptors.response.use(// interceptor의 response에서 사용되는 use는 2개의 파라미터가 들어가는데\n// 1. 정상 콜백\nresponse=>{return response;},// 2. 에러가 일어났을때 콜백\nerror=>{// 아래와 같은 방법으로 에러 처리를 한다~~ 참고하래\nif(error.response){//const errorStatus = error.response.status;\nreturn Promise.reject(error.response.data.error);}return Promise.reject(error);});","map":{"version":3,"names":["axios","getUserCookie","instance","create","baseURL","process","env","REACT_APP_API_PATH","timeout","headers","interceptors","request","use","config","token","response","error","Promise","reject","data"],"sources":["/Users/master/Desktop/coupon-project/kakaoshop-FE/src/services/api/index.js"],"sourcesContent":["import axios from 'axios'\nimport { getUserCookie } from '../cookie';\n\n//const staticServerUri = process.env.REACT_APP_PATH || \"\"; //배포환경의 백엔드 api 서버(크램폴린 환경)\n\nexport const instance = axios.create({\n  // baseURL을 하드코딩 하는 것은 Bad code -> env 환경변수에 담아 이용\n  // 왜? 1. 동적인 환경 관리(개발과 production 단계에서의 사용 api주소가 다를 수 있다.), 2. 보안, 3. 유지 보수 및 배포에 용이(소스코드 수정 없이 env만 수정)\n  //baseURL: \"http;//localhost:8080\" // 로컬 api 서버\n  baseURL: process.env.REACT_APP_API_PATH, // 환경변수 api 서버\n  //baseURL: staticServerUri + \"/api\", //배포환경의 백엔드 api 서버(크램폴린 환경)\n  // 꼭 timeout 세팅을 해줘야 한다. 무한정 요청을 기다릴 수 없기 때문\n  timeout: 1000 * 10,\n  headers: {\n    \"Content-Type\" : \"application/json\",\n    \"Referrer-Policy\": \"strict-origin-when-cross-origin\"\n  }\n})\n\n// Axios의 인터셉터를 사용하여 모든 요청 전에 실행될 함수를 등록합니다.\n// 요청 전에 실행되어 헤더에 인증 토큰을 추가하는 역할을 수행합니다.\ninstance.interceptors.request.use((config) =>{\n    const token = getUserCookie().token;\n    if (token) {\n      config.headers[\"Authorization\"] = `${token}`; // `Bearer ${token}`;\n    }\n    return config;\n  }\n)\n\n// response 단에서 에러 처리\n// 참고 : use 명령은 middleware 처럼 동작\ninstance.interceptors.response.use(\n  // interceptor의 response에서 사용되는 use는 2개의 파라미터가 들어가는데\n  // 1. 정상 콜백\n  (response) => {\n    return response;\n  },\n  // 2. 에러가 일어났을때 콜백\n  (error) => {\n    // 아래와 같은 방법으로 에러 처리를 한다~~ 참고하래\n    if (error.response) {\n      //const errorStatus = error.response.status;\n        return Promise.reject(error.response.data.error);\n    }\n    return Promise.reject(error);\n  }\n)\n\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CACzB,OAASC,aAAa,KAAQ,WAAW,CAEzC;AAEA,MAAO,MAAM,CAAAC,QAAQ,CAAGF,KAAK,CAACG,MAAM,CAAC,CACnC;AACA;AACA;AACAC,OAAO,CAAEC,OAAO,CAACC,GAAG,CAACC,kBAAkB,CAAE;AACzC;AACA;AACAC,OAAO,CAAE,IAAI,CAAG,EAAE,CAClBC,OAAO,CAAE,CACP,cAAc,CAAG,kBAAkB,CACnC,iBAAiB,CAAE,iCACrB,CACF,CAAC,CAAC,CAEF;AACA;AACAP,QAAQ,CAACQ,YAAY,CAACC,OAAO,CAACC,GAAG,CAAEC,MAAM,EAAI,CACzC,KAAM,CAAAC,KAAK,CAAGb,aAAa,CAAC,CAAC,CAACa,KAAK,CACnC,GAAIA,KAAK,CAAE,CACTD,MAAM,CAACJ,OAAO,CAAC,eAAe,CAAC,CAAG,GAAGK,KAAK,EAAE,CAAE;AAChD,CACA,MAAO,CAAAD,MAAM,CACf,CACF,CAAC,CAED;AACA;AACAX,QAAQ,CAACQ,YAAY,CAACK,QAAQ,CAACH,GAAG,CAChC;AACA;AACCG,QAAQ,EAAK,CACZ,MAAO,CAAAA,QAAQ,CACjB,CAAC,CACD;AACCC,KAAK,EAAK,CACT;AACA,GAAIA,KAAK,CAACD,QAAQ,CAAE,CAClB;AACE,MAAO,CAAAE,OAAO,CAACC,MAAM,CAACF,KAAK,CAACD,QAAQ,CAACI,IAAI,CAACH,KAAK,CAAC,CACpD,CACA,MAAO,CAAAC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC,CAC9B,CACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}