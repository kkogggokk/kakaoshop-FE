{"ast":null,"code":"import Container from\"../atoms/Container\";import InputGroup from\"../molecules/InputGroup\";import Button from\"../atoms/Button\";import useInput from\"../../hooks/useInput\";//import { login } from \"../../services/api\"; //loadingRequest에서 처리했음\nimport{loginRequest}from\"../../store/slices/userSlice\";import{useDispatch}from\"react-redux\";import{emailValidCheck,pwValidCheck}from\"../../utils/validationCheck\";import{useState}from\"react\";import{Link}from\"react-router-dom\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const staticServerUri=process.env.REACT_APP_PATH||\"\";const LoginForm=()=>{// 사용자 정보를 store에 저장 : dispatch를 사용하기 위해 useDispatch;\nconst dispatch=useDispatch();// 사용자 정보를 store로 부터 불러오기 : useSelector를 사용하기 위해\n// 아래 코드의 state는 글로벌 상태를 모두 담고 있는 최상위 state\n// const email = useSelector((state) => state.user);\nconst{value,handleOnChange}=useInput({email:\"\",password:\"\"});//RegisterForm에서의 validation과 코드 중복, 리팩토링 필요\nconst[validation,setValidation]=useState({email:true,password:true});const handleLogin=()=>{const isEmailValid=emailValidCheck(value.email);const isPwValid=pwValidCheck(value.password);setValidation({email:isEmailValid,password:isPwValid});if(isEmailValid&&isPwValid){// 유효성 검사 통과, 로그인 요청\ndispatch(loginRequest({email:value.email,password:value.password}));}};const handleKeyDown=e=>{if(e.key===\"Enter\"){e.preventDefault();handleLogin();}};//redux-thunk 사용 이전 비동기 처리 코드, 이래의 버튼 onClick의 dispatch(loginRequest)로 대체됨\n// const loginReq = () => {\n//   login({\n//     email: value.email,\n//     password: value.password,\n//   })\n//     .then((res) => {\n//       //console.log(res);\n//       // dispatch를 이용하여 store에 email을 저장\n//       dispatch(\n//         setEmail({\n//           email: value.email,\n//         })\n//       );\n//     })\n//     .catch((err) => {\n//       console.log(\"Error\", err);\n//     });\n// };\nconst[isFocus,setIsFocus]=useState([false,false]);return/*#__PURE__*/_jsxs(Container,{className:\"border-neutral-300 border px-16 py-14 w-[560px] min-w-fit h-full my-10 mx-auto\",onKeyDown:handleKeyDown,children:[/*#__PURE__*/_jsx(\"div\",{className:\"text-center font-normal text-3xl mx-auto my-10\",children:\"\\uB85C\\uADF8\\uC778\"}),/*#__PURE__*/_jsx(InputGroup,{id:\"email\",type:\"email\",name:\"email\",placeholder:\"이메일(아이디)\"//label={\"이메일\"}\n,value:value.email,onChange:handleOnChange///\n,className:isFocus[0]?\"border-b-2 border-neutral-500 m-5 mb-2\":\"border-b-2 border-neutral-300 m-5 mb-2\",inputClass:\"focus:outline-0 focus:bt-black w-full m-3\",onFocus:()=>{setIsFocus([true,isFocus[1]]);},onBlur:()=>{setIsFocus([false,isFocus[1]]);}}),/*#__PURE__*/_jsx(\"div\",{className:\"m-2 text-red-500 pl-3\",children:validation.email?\"\":\"잘못된 이메일 형식입니다.\"}),/*#__PURE__*/_jsx(InputGroup,{id:\"password\",type:\"password\",name:\"password\",placeholder:\"비밀번호\"//label={\"비밀번호\"}\n,value:value.password,onChange:handleOnChange///\n,className:isFocus[1]?\"border-b-2 border-neutral-500 m-5 mb-2\":\"border-b-2 border-neutral-300 m-5 mb-2\",inputClass:\"focus:outline-0 focus:bt-black w-full m-3\",onFocus:()=>{setIsFocus([isFocus[0],true]);},onBlur:()=>{setIsFocus([isFocus[0],false]);}}),/*#__PURE__*/_jsx(\"div\",{className:\"m-2 text-red-500 pl-3\",children:validation.password?\"\":\"영문, 숫자, 특수문자가 포함되며, 8에서 20자 이내여야 합니다.\"}),/*#__PURE__*/_jsx(Button,{className:\"block w-full h-12 mt-10 rounded bg-yellow-300 hover:bg-yellow-400\",onClick:handleLogin,children:\"\\uB85C\\uADF8\\uC778\"}),/*#__PURE__*/_jsx(Link,{to:staticServerUri+\"/signup\",className:\" inline-block my-6 mx-3 ml-[350px]\",children:\"\\uD68C\\uC6D0\\uAC00\\uC785\"})]});};export default LoginForm;","map":{"version":3,"names":["Container","InputGroup","Button","useInput","loginRequest","useDispatch","emailValidCheck","pwValidCheck","useState","Link","jsx","_jsx","jsxs","_jsxs","staticServerUri","process","env","REACT_APP_PATH","LoginForm","dispatch","value","handleOnChange","email","password","validation","setValidation","handleLogin","isEmailValid","isPwValid","handleKeyDown","e","key","preventDefault","isFocus","setIsFocus","className","onKeyDown","children","id","type","name","placeholder","onChange","inputClass","onFocus","onBlur","onClick","to"],"sources":["/Users/master/Desktop/coupon-project/kakaoshop-FE/src/components/organisms/LoginForm.jsx"],"sourcesContent":["import Container from \"../atoms/Container\";\nimport InputGroup from \"../molecules/InputGroup\";\nimport Button from \"../atoms/Button\";\nimport useInput from \"../../hooks/useInput\";\n//import { login } from \"../../services/api\"; //loadingRequest에서 처리했음\nimport { loginRequest } from \"../../store/slices/userSlice\";\nimport { useDispatch } from \"react-redux\";\nimport { emailValidCheck, pwValidCheck } from \"../../utils/validationCheck\";\nimport { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst staticServerUri = process.env.REACT_APP_PATH || \"\";\n\nconst LoginForm = () => {\n  // 사용자 정보를 store에 저장 : dispatch를 사용하기 위해 useDispatch;\n  const dispatch = useDispatch();\n  // 사용자 정보를 store로 부터 불러오기 : useSelector를 사용하기 위해\n  // 아래 코드의 state는 글로벌 상태를 모두 담고 있는 최상위 state\n  // const email = useSelector((state) => state.user);\n\n  const { value, handleOnChange } = useInput({\n    email: \"\",\n    password: \"\",\n  });\n\n  //RegisterForm에서의 validation과 코드 중복, 리팩토링 필요\n  const [validation, setValidation] = useState({\n    email: true,\n    password: true,\n  });\n  const handleLogin = () => {\n    const isEmailValid = emailValidCheck(value.email);\n    const isPwValid = pwValidCheck(value.password);\n\n    setValidation({\n      email: isEmailValid,\n      password: isPwValid,\n    });\n\n    if (isEmailValid && isPwValid) {\n      // 유효성 검사 통과, 로그인 요청\n      dispatch(\n        loginRequest({\n          email: value.email,\n          password: value.password,\n        })\n      );\n    }\n  };\n\n  const handleKeyDown = (e) => {\n    if (e.key === \"Enter\") {\n      e.preventDefault();\n      handleLogin();\n    }\n  };\n\n  //redux-thunk 사용 이전 비동기 처리 코드, 이래의 버튼 onClick의 dispatch(loginRequest)로 대체됨\n  // const loginReq = () => {\n  //   login({\n  //     email: value.email,\n  //     password: value.password,\n  //   })\n  //     .then((res) => {\n  //       //console.log(res);\n  //       // dispatch를 이용하여 store에 email을 저장\n  //       dispatch(\n  //         setEmail({\n  //           email: value.email,\n  //         })\n  //       );\n  //     })\n  //     .catch((err) => {\n  //       console.log(\"Error\", err);\n  //     });\n  // };\n  const [isFocus, setIsFocus] = useState([false, false]);\n  return (\n    <Container\n      className=\"border-neutral-300 border px-16 py-14 w-[560px] min-w-fit h-full my-10 mx-auto\"\n      onKeyDown={handleKeyDown}\n    >\n      <div className=\"text-center font-normal text-3xl mx-auto my-10\">\n        로그인\n      </div>\n      <InputGroup\n        id={\"email\"}\n        type={\"email\"}\n        name={\"email\"}\n        placeholder={\"이메일(아이디)\"}\n        //label={\"이메일\"}\n        value={value.email}\n        onChange={handleOnChange}\n        ///\n        className={\n          isFocus[0]\n            ? \"border-b-2 border-neutral-500 m-5 mb-2\"\n            : \"border-b-2 border-neutral-300 m-5 mb-2\"\n        }\n        inputClass={\"focus:outline-0 focus:bt-black w-full m-3\"}\n        onFocus={() => {\n          setIsFocus([true, isFocus[1]]);\n        }}\n        onBlur={() => {\n          setIsFocus([false, isFocus[1]]);\n        }}\n      />\n      <div className=\"m-2 text-red-500 pl-3\">\n        {validation.email ? \"\" : \"잘못된 이메일 형식입니다.\"}\n      </div>\n      <InputGroup\n        id={\"password\"}\n        type={\"password\"}\n        name={\"password\"}\n        placeholder={\"비밀번호\"}\n        //label={\"비밀번호\"}\n        value={value.password}\n        onChange={handleOnChange}\n        ///\n        className={\n          isFocus[1]\n            ? \"border-b-2 border-neutral-500 m-5 mb-2\"\n            : \"border-b-2 border-neutral-300 m-5 mb-2\"\n        }\n        inputClass={\"focus:outline-0 focus:bt-black w-full m-3\"}\n        onFocus={() => {\n          setIsFocus([isFocus[0], true]);\n        }}\n        onBlur={() => {\n          setIsFocus([isFocus[0], false]);\n        }}\n      />\n      <div className=\"m-2 text-red-500 pl-3\">\n        {validation.password\n          ? \"\"\n          : \"영문, 숫자, 특수문자가 포함되며, 8에서 20자 이내여야 합니다.\"}\n      </div>\n      <Button\n        className={\n          \"block w-full h-12 mt-10 rounded bg-yellow-300 hover:bg-yellow-400\"\n        }\n        onClick={handleLogin}\n      >\n        로그인\n      </Button>\n      <Link\n        to={staticServerUri + \"/signup\"}\n        className=\" inline-block my-6 mx-3 ml-[350px]\"\n      >\n        회원가입\n      </Link>\n    </Container>\n  );\n};\nexport default LoginForm;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}