{"ast":null,"code":"import{createSlice,createAsyncThunk}from\"@reduxjs/toolkit\";import{fetchProducts}from\"../../services/api/product\";import _ from\"lodash\";const initialState={products:[],loading:false,error:null,// error exist: {message, status}\nisEnd:false};const productsSlice=createSlice({name:\"products\",initialState,reducers:{},extraReducers:builder=>{builder.addCase(getProducts.pending,(state,action)=>{state.loading=true;});// Promise.resolve()\nbuilder.addCase(getProducts.fulfilled,(state,action)=>{// action.payload.response는 최대 10개의 요소가 있을 것\n// 10개보다 작다면 더이상 데이터를 불러오는게 의미 없음\nif(action.payload.response.length===0){state.isEnd=true;}state.loading=false;// response와 기존의 products와의 중복 확인 - lodash이용\n// 백엔드에서 상품 추가 시 응답 순서가 밀려 중복으로 출력되는 상품이 존재할 때를 대비\n// // action.payload = {success, response, error}\nstate.products=_.uniqBy([...state.products,...action.payload.response],\"id\");// id를 기준으로 unique한 값들만 남기기\nstate.error=action.payload.error;});// Promise.reject()\nbuilder.addCase(getProducts.rejected,(state,action)=>{state.loading=false;console.log(action);state.error=action.payload.error;// error exist: {message, status}\n});}});export const getProducts=createAsyncThunk(\"products/getProducts\",async page=>{const response=await fetchProducts(page);// API 호출 결과의 형태\n// response.data = {success: , response: [], error: }\nreturn response.data;// action.payload에 담겨 전달된다.\n});export default productsSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","fetchProducts","_","initialState","products","loading","error","isEnd","productsSlice","name","reducers","extraReducers","builder","addCase","getProducts","pending","state","action","fulfilled","payload","response","length","uniqBy","rejected","console","log","page","data","reducer"],"sources":["/Users/master/Desktop/coupon-project/kakaoshop-FE/src/store/slices/productSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { fetchProducts } from \"../../services/api/product\";\nimport _ from \"lodash\";\n\nconst initialState = {\n  products: [],\n  loading: false,\n  error: null, // error exist: {message, status}\n  isEnd: false,\n}\n\nconst productsSlice = createSlice({\n  name: \"products\",\n  initialState,\n  reducers: {\n\n  },\n  extraReducers: (builder) => {\n    builder.addCase(getProducts.pending, (state, action) => {\n      state.loading = true;\n    });\n    // Promise.resolve()\n    builder.addCase(getProducts.fulfilled, (state, action) => {\n      // action.payload.response는 최대 10개의 요소가 있을 것\n      // 10개보다 작다면 더이상 데이터를 불러오는게 의미 없음\n      if (action.payload.response.length === 0){\n        state.isEnd = true;\n      }\n      state.loading = false;\n      \n      // response와 기존의 products와의 중복 확인 - lodash이용\n      // 백엔드에서 상품 추가 시 응답 순서가 밀려 중복으로 출력되는 상품이 존재할 때를 대비\n      // // action.payload = {success, response, error}\n      state.products = _.uniqBy([...state.products, ...action.payload.response], \"id\"); // id를 기준으로 unique한 값들만 남기기\n\n      state.error = action.payload.error;\n    });\n    // Promise.reject()\n    builder.addCase(getProducts.rejected, (state, action) => {\n      state.loading = false;\n      console.log(action)\n      state.error = action.payload.error; // error exist: {message, status}\n    });\n  }\n  \n})\n\nexport const getProducts = createAsyncThunk(\n  \"products/getProducts\",\n  async (page) => {\n    const response = await fetchProducts(page);\n    // API 호출 결과의 형태\n    // response.data = {success: , response: [], error: }\n    return response.data; // action.payload에 담겨 전달된다.\n  }\n)\n\nexport default productsSlice.reducer;"],"mappings":"AAAA,OAASA,WAAW,CAAEC,gBAAgB,KAAQ,kBAAkB,CAChE,OAASC,aAAa,KAAQ,4BAA4B,CAC1D,MAAO,CAAAC,CAAC,KAAM,QAAQ,CAEtB,KAAM,CAAAC,YAAY,CAAG,CACnBC,QAAQ,CAAE,EAAE,CACZC,OAAO,CAAE,KAAK,CACdC,KAAK,CAAE,IAAI,CAAE;AACbC,KAAK,CAAE,KACT,CAAC,CAED,KAAM,CAAAC,aAAa,CAAGT,WAAW,CAAC,CAChCU,IAAI,CAAE,UAAU,CAChBN,YAAY,CACZO,QAAQ,CAAE,CAEV,CAAC,CACDC,aAAa,CAAGC,OAAO,EAAK,CAC1BA,OAAO,CAACC,OAAO,CAACC,WAAW,CAACC,OAAO,CAAE,CAACC,KAAK,CAAEC,MAAM,GAAK,CACtDD,KAAK,CAACX,OAAO,CAAG,IAAI,CACtB,CAAC,CAAC,CACF;AACAO,OAAO,CAACC,OAAO,CAACC,WAAW,CAACI,SAAS,CAAE,CAACF,KAAK,CAAEC,MAAM,GAAK,CACxD;AACA;AACA,GAAIA,MAAM,CAACE,OAAO,CAACC,QAAQ,CAACC,MAAM,GAAK,CAAC,CAAC,CACvCL,KAAK,CAACT,KAAK,CAAG,IAAI,CACpB,CACAS,KAAK,CAACX,OAAO,CAAG,KAAK,CAErB;AACA;AACA;AACAW,KAAK,CAACZ,QAAQ,CAAGF,CAAC,CAACoB,MAAM,CAAC,CAAC,GAAGN,KAAK,CAACZ,QAAQ,CAAE,GAAGa,MAAM,CAACE,OAAO,CAACC,QAAQ,CAAC,CAAE,IAAI,CAAC,CAAE;AAElFJ,KAAK,CAACV,KAAK,CAAGW,MAAM,CAACE,OAAO,CAACb,KAAK,CACpC,CAAC,CAAC,CACF;AACAM,OAAO,CAACC,OAAO,CAACC,WAAW,CAACS,QAAQ,CAAE,CAACP,KAAK,CAAEC,MAAM,GAAK,CACvDD,KAAK,CAACX,OAAO,CAAG,KAAK,CACrBmB,OAAO,CAACC,GAAG,CAACR,MAAM,CAAC,CACnBD,KAAK,CAACV,KAAK,CAAGW,MAAM,CAACE,OAAO,CAACb,KAAK,CAAE;AACtC,CAAC,CAAC,CACJ,CAEF,CAAC,CAAC,CAEF,MAAO,MAAM,CAAAQ,WAAW,CAAGd,gBAAgB,CACzC,sBAAsB,CACtB,KAAO,CAAA0B,IAAI,EAAK,CACd,KAAM,CAAAN,QAAQ,CAAG,KAAM,CAAAnB,aAAa,CAACyB,IAAI,CAAC,CAC1C;AACA;AACA,MAAO,CAAAN,QAAQ,CAACO,IAAI,CAAE;AACxB,CACF,CAAC,CAED,cAAe,CAAAnB,aAAa,CAACoB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}