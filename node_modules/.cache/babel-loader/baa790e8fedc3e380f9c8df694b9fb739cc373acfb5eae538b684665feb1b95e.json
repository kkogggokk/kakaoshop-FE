{"ast":null,"code":"import Container from\"../atoms/Container\";import InputGroup from\"../molecules/InputGroup\";import Button from\"../atoms/Button\";import useInput from\"../../hooks/useInput\";import{useState}from\"react\";import{emailValidCheck,pwValidCheck}from\"../../utils/validationCheck\";import{registerRequest}from\"../../store/slices/userSlice\";import{useDispatch}from\"react-redux\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const RegisterForm=()=>{// RegisterForm의 상태 관리\n// 상태 관리는 높은 단계에서 하는 것이 좋다 (atoms level X -> molecule organism level O)\n// useInput 커스텀 훅 사용 이전 코드\n// const [form, setForm] = useState({\n//   username: \"\",\n//   email: \"\",\n//   password: \"\",\n//   passwordConfirm: \"\",\n// });\nconst{value,handleOnChange}=useInput({username:\"\",email:\"\",password:\"\",passwordConfirm:\"\"});const dispatch=useDispatch();//LoginForm에서의 validation과 코드 중복, 리팩토링 필요\nconst[validation,setValidation]=useState({username:true,email:true,password:true,pwConfirm:true});const handleRequest=()=>{const existUsername=Boolean(value.username);const isEmailValid=emailValidCheck(value.email);const isPwValid=pwValidCheck(value.password);const isPwCheckValid=value.password===value.passwordConfirm;setValidation({username:existUsername,email:isEmailValid,password:isPwValid,pwConfirm:isPwCheckValid});if(isEmailValid&&isPwValid&&isPwCheckValid){// 유효성 검사 통과, 로그인 요청\ndispatch(registerRequest({email:value.email,password:value.password,username:value.username}));}};const handleKeyDown=e=>{if(e.key===\"Enter\"){e.preventDefault();handleRequest();}};const[isFocus,setIsFocus]=useState([false,false,false,false]);const getInputGroupClass=index=>{return isFocus[index]?\"border-b-2 border-neutral-500 m-5 mb-2\":\"border-b-2 border-neutral-300 m-5 mb-2\";};const handleFocus=(index,value)=>{setIsFocus(prevIsFocus=>{const newIsFocus=[...prevIsFocus];newIsFocus[index]=value;return newIsFocus;});};return/*#__PURE__*/_jsxs(Container,{className:\"border-neutral-300 border px-16 py-14 w-[660px] min-w-fit h-full my-10 mx-auto\",onKeyDown:handleKeyDown,children:[/*#__PURE__*/_jsx(\"div\",{className:\"text-center font-normal text-3xl mx-auto my-10\",children:\"\\uAC00\\uC785\\uC744 \\uC2DC\\uC791\\uD569\\uB2C8\\uB2E4!\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"text-center font-normal text-lg text-gray-400 mx-auto my-10\",children:[/*#__PURE__*/_jsx(\"span\",{children:\"\\uCE74\\uCE74\\uC624\\uACC4\\uC815 \\uD558\\uB098\\uB85C\"}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"span\",{children:\"\\uB2E4\\uC591\\uD55C \\uC11C\\uBE44\\uC2A4\\uB97C \\uD3B8\\uB9AC\\uD558\\uAC8C \\uC774\\uC6A9\\uD574 \\uBCF4\\uC138\\uC694.\"})]}),/*#__PURE__*/_jsx(InputGroup,{id:\"username\",type:\"text\",name:\"username\",placeholder:\"사용자 이름\"//label={\"이름\"}\n// 커스텀 훅 사용 이전 코드\n// value={form.username}\n// onChange={(e) => {\n//   setForm({ ...form, [e.target.name]: e.target.value });\n// }} // input 값의 변경시 => onChange => setForm 으로 상태 관리\n// // 아래의 다른 InputGroup들 마다 username:, password: 각각 다른 속성을 부여해야 하므로 귀찮다\n// // 그래서 input에 name 속성을 주고 이를 e.target.name으로 받아와서 이용한다\n,value:value.username,onChange:handleOnChange///\n,className:getInputGroupClass(0),inputClass:\"focus:outline-0 focus:bt-black w-full m-3\",onFocus:()=>{handleFocus(0,true);},onBlur:()=>{handleFocus(0,false);}}),/*#__PURE__*/_jsx(\"div\",{className:\"m-2 text-red-500 pl-3\",children:validation.username?\"\":\"사용자 이름을 입력해 주세요.\"}),/*#__PURE__*/_jsx(InputGroup,{id:\"email\",type:\"email\",name:\"email\",placeholder:\"이메일(아이디)\"//label={\"이메일\"}\n,value:value.email,onChange:handleOnChange///\n,className:getInputGroupClass(1),inputClass:\"focus:outline-0 focus:bt-black w-full m-3\",onFocus:()=>{handleFocus(1,true);},onBlur:()=>{handleFocus(1,false);}}),/*#__PURE__*/_jsx(\"div\",{className:\"m-2 text-red-500 pl-3\",children:validation.email?\"\":\"잘못된 이메일 형식입니다.\"}),/*#__PURE__*/_jsx(InputGroup,{id:\"password\",type:\"password\",name:\"password\",placeholder:\"비밀번호\"//label={\"비밀번호\"}\n,value:value.password,onChange:handleOnChange///\n,className:getInputGroupClass(2),inputClass:\"focus:outline-0 focus:bt-black w-full m-3\",onFocus:()=>{handleFocus(2,true);},onBlur:()=>{handleFocus(2,false);}}),/*#__PURE__*/_jsx(\"div\",{className:\"m-2 text-red-500 pl-3\",children:validation.password?\"\":\"영문, 숫자, 특수문자가 포함되며, 8에서 20자 이내여야 합니다.\"}),/*#__PURE__*/_jsx(InputGroup,{id:\"passwordConfirm\",type:\"password\",name:\"passwordConfirm\",placeholder:\"비밀번호 확인\"//label={\"비밀번호 확인\"}\n,value:value.passwordConfirm,onChange:handleOnChange///\n,className:getInputGroupClass(3),inputClass:\"focus:outline-0 focus:bt-black w-full m-3\",onFocus:()=>{handleFocus(3,true);},onBlur:()=>{handleFocus(3,false);}}),/*#__PURE__*/_jsx(\"div\",{className:\"m-2 text-red-500 pl-3\",children:validation.pwConfirm?\"\":\"비밀번호가 일치하지 않습니다.\"}),/*#__PURE__*/_jsx(Button,{className:\"block w-full h-12 mt-10 rounded bg-yellow-300 hover:bg-yellow-400\",onClick:handleRequest// registerRequest 사용 이전 코드\n//   () => {\n//   // API 회원가입 요청\n//   // register 함수에 필요없는 passwordConfirm은 전달하지 않게 하기 위해 객체로 전달\n//   // 깔끔하진 않겠지만 value를 통으로 전달해도 기능은 한다. register에서 처리하기 떄문\n//   register({\n//     email: value.email,\n//     password: value.password,\n//     username: value.username,\n//   }\n//   );\n// }\n,children:\"\\uD68C\\uC6D0\\uAC00\\uC785\"})]});};export default RegisterForm;","map":{"version":3,"names":["Container","InputGroup","Button","useInput","useState","emailValidCheck","pwValidCheck","registerRequest","useDispatch","jsx","_jsx","jsxs","_jsxs","RegisterForm","value","handleOnChange","username","email","password","passwordConfirm","dispatch","validation","setValidation","pwConfirm","handleRequest","existUsername","Boolean","isEmailValid","isPwValid","isPwCheckValid","handleKeyDown","e","key","preventDefault","isFocus","setIsFocus","getInputGroupClass","index","handleFocus","prevIsFocus","newIsFocus","className","onKeyDown","children","id","type","name","placeholder","onChange","inputClass","onFocus","onBlur","onClick"],"sources":["/Users/master/Desktop/coupon-project/kakaoshop-FE/src/components/organisms/RegisterForm.jsx"],"sourcesContent":["import Container from \"../atoms/Container\";\nimport InputGroup from \"../molecules/InputGroup\";\nimport Button from \"../atoms/Button\";\nimport useInput from \"../../hooks/useInput\";\nimport { useState } from \"react\";\nimport { emailValidCheck, pwValidCheck } from \"../../utils/validationCheck\";\nimport { registerRequest } from \"../../store/slices/userSlice\";\nimport { useDispatch } from \"react-redux\";\n\nconst RegisterForm = () => {\n  // RegisterForm의 상태 관리\n  // 상태 관리는 높은 단계에서 하는 것이 좋다 (atoms level X -> molecule organism level O)\n\n  // useInput 커스텀 훅 사용 이전 코드\n  // const [form, setForm] = useState({\n  //   username: \"\",\n  //   email: \"\",\n  //   password: \"\",\n  //   passwordConfirm: \"\",\n  // });\n\n  const { value, handleOnChange } = useInput({\n    username: \"\",\n    email: \"\",\n    password: \"\",\n    passwordConfirm: \"\",\n  });\n\n  const dispatch = useDispatch();\n\n  //LoginForm에서의 validation과 코드 중복, 리팩토링 필요\n  const [validation, setValidation] = useState({\n    username: true,\n    email: true,\n    password: true,\n    pwConfirm: true,\n  });\n  const handleRequest = () => {\n    const existUsername = Boolean(value.username);\n    const isEmailValid = emailValidCheck(value.email);\n    const isPwValid = pwValidCheck(value.password);\n    const isPwCheckValid = value.password === value.passwordConfirm;\n\n    setValidation({\n      username: existUsername,\n      email: isEmailValid,\n      password: isPwValid,\n      pwConfirm: isPwCheckValid,\n    });\n\n    if (isEmailValid && isPwValid && isPwCheckValid) {\n      // 유효성 검사 통과, 로그인 요청\n      dispatch(\n        registerRequest({\n          email: value.email,\n          password: value.password,\n          username: value.username,\n        })\n      );\n    }\n  };\n\n  const handleKeyDown = (e) => {\n    if (e.key === \"Enter\") {\n      e.preventDefault();\n      handleRequest();\n    }\n  };\n\n  const [isFocus, setIsFocus] = useState([false, false, false, false]);\n  const getInputGroupClass = (index) => {\n    return isFocus[index]\n      ? \"border-b-2 border-neutral-500 m-5 mb-2\"\n      : \"border-b-2 border-neutral-300 m-5 mb-2\";\n  };\n  const handleFocus = (index, value) => {\n    setIsFocus((prevIsFocus) => {\n      const newIsFocus = [...prevIsFocus];\n      newIsFocus[index] = value;\n      return newIsFocus;\n    });\n  };\n\n  return (\n    <Container\n      className=\"border-neutral-300 border px-16 py-14 w-[660px] min-w-fit h-full my-10 mx-auto\"\n      onKeyDown={handleKeyDown}\n    >\n      <div className=\"text-center font-normal text-3xl mx-auto my-10\">\n        가입을 시작합니다!\n      </div>\n      <div className=\"text-center font-normal text-lg text-gray-400 mx-auto my-10\">\n        <span>카카오계정 하나로</span>\n        <br />\n        <span>다양한 서비스를 편리하게 이용해 보세요.</span>\n      </div>\n      <InputGroup\n        id={\"username\"}\n        type={\"text\"}\n        name={\"username\"}\n        placeholder={\"사용자 이름\"}\n        //label={\"이름\"}\n        // 커스텀 훅 사용 이전 코드\n        // value={form.username}\n        // onChange={(e) => {\n        //   setForm({ ...form, [e.target.name]: e.target.value });\n        // }} // input 값의 변경시 => onChange => setForm 으로 상태 관리\n        // // 아래의 다른 InputGroup들 마다 username:, password: 각각 다른 속성을 부여해야 하므로 귀찮다\n        // // 그래서 input에 name 속성을 주고 이를 e.target.name으로 받아와서 이용한다\n        value={value.username}\n        onChange={handleOnChange}\n        ///\n        className={getInputGroupClass(0)}\n        inputClass={\"focus:outline-0 focus:bt-black w-full m-3\"}\n        onFocus={() => {\n          handleFocus(0, true);\n        }}\n        onBlur={() => {\n          handleFocus(0, false);\n        }}\n      />\n      <div className=\"m-2 text-red-500 pl-3\">\n        {validation.username ? \"\" : \"사용자 이름을 입력해 주세요.\"}\n      </div>\n      <InputGroup\n        id={\"email\"}\n        type={\"email\"}\n        name={\"email\"}\n        placeholder={\"이메일(아이디)\"}\n        //label={\"이메일\"}\n        value={value.email}\n        onChange={handleOnChange}\n        ///\n        className={getInputGroupClass(1)}\n        inputClass={\"focus:outline-0 focus:bt-black w-full m-3\"}\n        onFocus={() => {\n          handleFocus(1, true);\n        }}\n        onBlur={() => {\n          handleFocus(1, false);\n        }}\n      />\n      <div className=\"m-2 text-red-500 pl-3\">\n        {validation.email ? \"\" : \"잘못된 이메일 형식입니다.\"}\n      </div>\n      <InputGroup\n        id={\"password\"}\n        type={\"password\"}\n        name={\"password\"}\n        placeholder={\"비밀번호\"}\n        //label={\"비밀번호\"}\n        value={value.password}\n        onChange={handleOnChange}\n        ///\n        className={getInputGroupClass(2)}\n        inputClass={\"focus:outline-0 focus:bt-black w-full m-3\"}\n        onFocus={() => {\n          handleFocus(2, true);\n        }}\n        onBlur={() => {\n          handleFocus(2, false);\n        }}\n      />\n      <div className=\"m-2 text-red-500 pl-3\">\n        {validation.password\n          ? \"\"\n          : \"영문, 숫자, 특수문자가 포함되며, 8에서 20자 이내여야 합니다.\"}\n      </div>\n      <InputGroup\n        id={\"passwordConfirm\"}\n        type={\"password\"}\n        name={\"passwordConfirm\"}\n        placeholder={\"비밀번호 확인\"}\n        //label={\"비밀번호 확인\"}\n        value={value.passwordConfirm}\n        onChange={handleOnChange}\n        ///\n        className={getInputGroupClass(3)}\n        inputClass={\"focus:outline-0 focus:bt-black w-full m-3\"}\n        onFocus={() => {\n          handleFocus(3, true);\n        }}\n        onBlur={() => {\n          handleFocus(3, false);\n        }}\n      />\n      <div className=\"m-2 text-red-500 pl-3\">\n        {validation.pwConfirm ? \"\" : \"비밀번호가 일치하지 않습니다.\"}\n      </div>\n      <Button\n        className={\n          \"block w-full h-12 mt-10 rounded bg-yellow-300 hover:bg-yellow-400\"\n        }\n        onClick={\n          handleRequest\n          // registerRequest 사용 이전 코드\n          //   () => {\n          //   // API 회원가입 요청\n          //   // register 함수에 필요없는 passwordConfirm은 전달하지 않게 하기 위해 객체로 전달\n          //   // 깔끔하진 않겠지만 value를 통으로 전달해도 기능은 한다. register에서 처리하기 떄문\n          //   register({\n          //     email: value.email,\n          //     password: value.password,\n          //     username: value.username,\n          //   }\n          //   );\n          // }\n        }\n      >\n        회원가입\n      </Button>\n    </Container>\n  );\n};\nexport default RegisterForm;\n"],"mappings":"AAAA,MAAO,CAAAA,SAAS,KAAM,oBAAoB,CAC1C,MAAO,CAAAC,UAAU,KAAM,yBAAyB,CAChD,MAAO,CAAAC,MAAM,KAAM,iBAAiB,CACpC,MAAO,CAAAC,QAAQ,KAAM,sBAAsB,CAC3C,OAASC,QAAQ,KAAQ,OAAO,CAChC,OAASC,eAAe,CAAEC,YAAY,KAAQ,6BAA6B,CAC3E,OAASC,eAAe,KAAQ,8BAA8B,CAC9D,OAASC,WAAW,KAAQ,aAAa,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAE1C,KAAM,CAAAC,YAAY,CAAGA,CAAA,GAAM,CACzB;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,KAAM,CAAEC,KAAK,CAAEC,cAAe,CAAC,CAAGZ,QAAQ,CAAC,CACzCa,QAAQ,CAAE,EAAE,CACZC,KAAK,CAAE,EAAE,CACTC,QAAQ,CAAE,EAAE,CACZC,eAAe,CAAE,EACnB,CAAC,CAAC,CAEF,KAAM,CAAAC,QAAQ,CAAGZ,WAAW,CAAC,CAAC,CAE9B;AACA,KAAM,CAACa,UAAU,CAAEC,aAAa,CAAC,CAAGlB,QAAQ,CAAC,CAC3CY,QAAQ,CAAE,IAAI,CACdC,KAAK,CAAE,IAAI,CACXC,QAAQ,CAAE,IAAI,CACdK,SAAS,CAAE,IACb,CAAC,CAAC,CACF,KAAM,CAAAC,aAAa,CAAGA,CAAA,GAAM,CAC1B,KAAM,CAAAC,aAAa,CAAGC,OAAO,CAACZ,KAAK,CAACE,QAAQ,CAAC,CAC7C,KAAM,CAAAW,YAAY,CAAGtB,eAAe,CAACS,KAAK,CAACG,KAAK,CAAC,CACjD,KAAM,CAAAW,SAAS,CAAGtB,YAAY,CAACQ,KAAK,CAACI,QAAQ,CAAC,CAC9C,KAAM,CAAAW,cAAc,CAAGf,KAAK,CAACI,QAAQ,GAAKJ,KAAK,CAACK,eAAe,CAE/DG,aAAa,CAAC,CACZN,QAAQ,CAAES,aAAa,CACvBR,KAAK,CAAEU,YAAY,CACnBT,QAAQ,CAAEU,SAAS,CACnBL,SAAS,CAAEM,cACb,CAAC,CAAC,CAEF,GAAIF,YAAY,EAAIC,SAAS,EAAIC,cAAc,CAAE,CAC/C;AACAT,QAAQ,CACNb,eAAe,CAAC,CACdU,KAAK,CAAEH,KAAK,CAACG,KAAK,CAClBC,QAAQ,CAAEJ,KAAK,CAACI,QAAQ,CACxBF,QAAQ,CAAEF,KAAK,CAACE,QAClB,CAAC,CACH,CAAC,CACH,CACF,CAAC,CAED,KAAM,CAAAc,aAAa,CAAIC,CAAC,EAAK,CAC3B,GAAIA,CAAC,CAACC,GAAG,GAAK,OAAO,CAAE,CACrBD,CAAC,CAACE,cAAc,CAAC,CAAC,CAClBT,aAAa,CAAC,CAAC,CACjB,CACF,CAAC,CAED,KAAM,CAACU,OAAO,CAAEC,UAAU,CAAC,CAAG/B,QAAQ,CAAC,CAAC,KAAK,CAAE,KAAK,CAAE,KAAK,CAAE,KAAK,CAAC,CAAC,CACpE,KAAM,CAAAgC,kBAAkB,CAAIC,KAAK,EAAK,CACpC,MAAO,CAAAH,OAAO,CAACG,KAAK,CAAC,CACjB,wCAAwC,CACxC,wCAAwC,CAC9C,CAAC,CACD,KAAM,CAAAC,WAAW,CAAGA,CAACD,KAAK,CAAEvB,KAAK,GAAK,CACpCqB,UAAU,CAAEI,WAAW,EAAK,CAC1B,KAAM,CAAAC,UAAU,CAAG,CAAC,GAAGD,WAAW,CAAC,CACnCC,UAAU,CAACH,KAAK,CAAC,CAAGvB,KAAK,CACzB,MAAO,CAAA0B,UAAU,CACnB,CAAC,CAAC,CACJ,CAAC,CAED,mBACE5B,KAAA,CAACZ,SAAS,EACRyC,SAAS,CAAC,gFAAgF,CAC1FC,SAAS,CAAEZ,aAAc,CAAAa,QAAA,eAEzBjC,IAAA,QAAK+B,SAAS,CAAC,gDAAgD,CAAAE,QAAA,CAAC,oDAEhE,CAAK,CAAC,cACN/B,KAAA,QAAK6B,SAAS,CAAC,6DAA6D,CAAAE,QAAA,eAC1EjC,IAAA,SAAAiC,QAAA,CAAM,mDAAS,CAAM,CAAC,cACtBjC,IAAA,QAAK,CAAC,cACNA,IAAA,SAAAiC,QAAA,CAAM,6GAAsB,CAAM,CAAC,EAChC,CAAC,cACNjC,IAAA,CAACT,UAAU,EACT2C,EAAE,CAAE,UAAW,CACfC,IAAI,CAAE,MAAO,CACbC,IAAI,CAAE,UAAW,CACjBC,WAAW,CAAE,QACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA,CACAjC,KAAK,CAAEA,KAAK,CAACE,QAAS,CACtBgC,QAAQ,CAAEjC,cACV;AAAA,CACA0B,SAAS,CAAEL,kBAAkB,CAAC,CAAC,CAAE,CACjCa,UAAU,CAAE,2CAA4C,CACxDC,OAAO,CAAEA,CAAA,GAAM,CACbZ,WAAW,CAAC,CAAC,CAAE,IAAI,CAAC,CACtB,CAAE,CACFa,MAAM,CAAEA,CAAA,GAAM,CACZb,WAAW,CAAC,CAAC,CAAE,KAAK,CAAC,CACvB,CAAE,CACH,CAAC,cACF5B,IAAA,QAAK+B,SAAS,CAAC,uBAAuB,CAAAE,QAAA,CACnCtB,UAAU,CAACL,QAAQ,CAAG,EAAE,CAAG,kBAAkB,CAC3C,CAAC,cACNN,IAAA,CAACT,UAAU,EACT2C,EAAE,CAAE,OAAQ,CACZC,IAAI,CAAE,OAAQ,CACdC,IAAI,CAAE,OAAQ,CACdC,WAAW,CAAE,UACb;AAAA,CACAjC,KAAK,CAAEA,KAAK,CAACG,KAAM,CACnB+B,QAAQ,CAAEjC,cACV;AAAA,CACA0B,SAAS,CAAEL,kBAAkB,CAAC,CAAC,CAAE,CACjCa,UAAU,CAAE,2CAA4C,CACxDC,OAAO,CAAEA,CAAA,GAAM,CACbZ,WAAW,CAAC,CAAC,CAAE,IAAI,CAAC,CACtB,CAAE,CACFa,MAAM,CAAEA,CAAA,GAAM,CACZb,WAAW,CAAC,CAAC,CAAE,KAAK,CAAC,CACvB,CAAE,CACH,CAAC,cACF5B,IAAA,QAAK+B,SAAS,CAAC,uBAAuB,CAAAE,QAAA,CACnCtB,UAAU,CAACJ,KAAK,CAAG,EAAE,CAAG,gBAAgB,CACtC,CAAC,cACNP,IAAA,CAACT,UAAU,EACT2C,EAAE,CAAE,UAAW,CACfC,IAAI,CAAE,UAAW,CACjBC,IAAI,CAAE,UAAW,CACjBC,WAAW,CAAE,MACb;AAAA,CACAjC,KAAK,CAAEA,KAAK,CAACI,QAAS,CACtB8B,QAAQ,CAAEjC,cACV;AAAA,CACA0B,SAAS,CAAEL,kBAAkB,CAAC,CAAC,CAAE,CACjCa,UAAU,CAAE,2CAA4C,CACxDC,OAAO,CAAEA,CAAA,GAAM,CACbZ,WAAW,CAAC,CAAC,CAAE,IAAI,CAAC,CACtB,CAAE,CACFa,MAAM,CAAEA,CAAA,GAAM,CACZb,WAAW,CAAC,CAAC,CAAE,KAAK,CAAC,CACvB,CAAE,CACH,CAAC,cACF5B,IAAA,QAAK+B,SAAS,CAAC,uBAAuB,CAAAE,QAAA,CACnCtB,UAAU,CAACH,QAAQ,CAChB,EAAE,CACF,uCAAuC,CACxC,CAAC,cACNR,IAAA,CAACT,UAAU,EACT2C,EAAE,CAAE,iBAAkB,CACtBC,IAAI,CAAE,UAAW,CACjBC,IAAI,CAAE,iBAAkB,CACxBC,WAAW,CAAE,SACb;AAAA,CACAjC,KAAK,CAAEA,KAAK,CAACK,eAAgB,CAC7B6B,QAAQ,CAAEjC,cACV;AAAA,CACA0B,SAAS,CAAEL,kBAAkB,CAAC,CAAC,CAAE,CACjCa,UAAU,CAAE,2CAA4C,CACxDC,OAAO,CAAEA,CAAA,GAAM,CACbZ,WAAW,CAAC,CAAC,CAAE,IAAI,CAAC,CACtB,CAAE,CACFa,MAAM,CAAEA,CAAA,GAAM,CACZb,WAAW,CAAC,CAAC,CAAE,KAAK,CAAC,CACvB,CAAE,CACH,CAAC,cACF5B,IAAA,QAAK+B,SAAS,CAAC,uBAAuB,CAAAE,QAAA,CACnCtB,UAAU,CAACE,SAAS,CAAG,EAAE,CAAG,kBAAkB,CAC5C,CAAC,cACNb,IAAA,CAACR,MAAM,EACLuC,SAAS,CACP,mEACD,CACDW,OAAO,CACL5B,aACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,CAAAmB,QAAA,CACF,0BAED,CAAQ,CAAC,EACA,CAAC,CAEhB,CAAC,CACD,cAAe,CAAA9B,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}