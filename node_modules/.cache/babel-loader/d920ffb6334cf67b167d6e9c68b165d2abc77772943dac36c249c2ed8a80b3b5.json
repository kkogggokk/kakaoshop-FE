{"ast":null,"code":"import{useState}from\"react\";const useInput=initialValue=>{const[value,setValue]=useState(initialValue);const handleOnChange=e=>{const{name,value}=e.target;// setValue({...prev, [name]: value})이렇게 바로 사용하는것 보다\n// 아래 코드처럼 overiding하여 사용하는 것이 더 좋다.\n// 에러 발생을 줄이고, arrow func 내에서 prev에 대한 전처리도 가능하기 때문\nsetValue(prev=>({...prev,[name]:value}));};// return은 배열 [], 객체 {} 어떤 것으로 해도 상관 없으나\n// 객체로 반환하면 순서에 관여받지 않기 때문에 객체로 반환하는 것을 추천\nreturn{value,handleOnChange};};export default useInput;","map":{"version":3,"names":["useState","useInput","initialValue","value","setValue","handleOnChange","e","name","target","prev"],"sources":["/Users/master/Desktop/coupon-project/kakaoshop-FE/src/hooks/useInput.js"],"sourcesContent":["import { useState } from \"react\"\n\nconst useInput = (initialValue) => {\n  const [value, setValue] = useState(initialValue);\n\n  const handleOnChange = (e) => {\n    const { name, value } = e.target;\n    // setValue({...prev, [name]: value})이렇게 바로 사용하는것 보다\n    // 아래 코드처럼 overiding하여 사용하는 것이 더 좋다.\n    // 에러 발생을 줄이고, arrow func 내에서 prev에 대한 전처리도 가능하기 때문\n    setValue((prev) => ({...prev, [name]: value}))\n  }\n\n  // return은 배열 [], 객체 {} 어떤 것으로 해도 상관 없으나\n  // 객체로 반환하면 순서에 관여받지 않기 때문에 객체로 반환하는 것을 추천\n  return { value, handleOnChange};\n}\nexport default useInput;"],"mappings":"AAAA,OAASA,QAAQ,KAAQ,OAAO,CAEhC,KAAM,CAAAC,QAAQ,CAAIC,YAAY,EAAK,CACjC,KAAM,CAACC,KAAK,CAAEC,QAAQ,CAAC,CAAGJ,QAAQ,CAACE,YAAY,CAAC,CAEhD,KAAM,CAAAG,cAAc,CAAIC,CAAC,EAAK,CAC5B,KAAM,CAAEC,IAAI,CAAEJ,KAAM,CAAC,CAAGG,CAAC,CAACE,MAAM,CAChC;AACA;AACA;AACAJ,QAAQ,CAAEK,IAAI,GAAM,CAAC,GAAGA,IAAI,CAAE,CAACF,IAAI,EAAGJ,KAAK,CAAC,CAAC,CAAC,CAChD,CAAC,CAED;AACA;AACA,MAAO,CAAEA,KAAK,CAAEE,cAAc,CAAC,CACjC,CAAC,CACD,cAAe,CAAAJ,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}