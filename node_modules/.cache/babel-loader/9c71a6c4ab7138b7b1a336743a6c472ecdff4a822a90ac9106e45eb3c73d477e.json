{"ast":null,"code":"import{createSlice,createAsyncThunk}from\"@reduxjs/toolkit\";import{login,register}from\"../../services/api/user\";import{setUserCookie}from\"../../services/cookie\";const staticServerUri=process.env.REACT_APP_PATH||\"\";// 슬라이스를 만들때 주의할 점 : initial state를 꼭 만들어 줘야 한다\nconst initialState={email:null,loading:false,// 요청을 보냈을 때는 true, 아닌 경우: 요청이 없었거나, 실패했거나, 성공했을 때 false\n//error: null, // 만약에 에러가 있는 경우에 error.message 값을 담는다. 이런식으로 에러를 처리할 수 있다. 아래 extraReducer의 rejected에서 이용\ntoken:null};const userSlice=createSlice({name:\"user\",initialState,reducers:{setEmail:(state,action)=>{// action으로 받은 email 정보를 state로 전달\nstate.email=\"test email\";},logout:(state,action)=>{state.email=null;state.token=null;},setUserInfo:(state,action)=>{state.email=action.payload.email;state.token=action.payload.token;}},extraReducers:builder=>{/* loginRequest */ // Promise의 pending(대기) 상태 : 이행하지도, 거부하지도 않은 초기 상태\nbuilder.addCase(loginRequest.pending,(state,action)=>{state.loading=true;});// Promise의 fulfilled(이행) 상태: 연산이 성공적으로 완료됨.\nbuilder.addCase(loginRequest.fulfilled,(state,action)=>{const[tempEmail,tempToken]=[action.payload.email,action.payload.token];state.loading=false;state.email=tempEmail;// loginRequest의 return 값이 들어가게 됨\nstate.token=tempToken;// add cookie - email, token \nsetUserCookie({email:tempEmail,token:tempToken});window.location.href=staticServerUri+\"/\";// HomePage로 리디렉션\n});// Promise의ㅣ rejected(거부): 연산이 실패함\nbuilder.addCase(loginRequest.rejected,(state,action)=>{state.loading=false;alert(action.error.message);//state.error = action.payload.error.message; //이런 식으로 에러를 담을 수도 있다.\n});/* registerRequest */builder.addCase(registerRequest.pending,(state,action)=>{state.loading=true;});builder.addCase(registerRequest.fulfilled,(state,action)=>{state.loading=false;window.location.href=staticServerUri+\"/\";// HomePage로 리디렉션\nalert(\"회원가입이 완료되었습니다.\");});builder.addCase(registerRequest.rejected,(state,action)=>{state.loading=false;alert(action.error.message);});}});export const loginRequest=createAsyncThunk(\"user/login\",async data=>{const{email,password}=data;const response=await login({email,password});//return response.data\nreturn{email:email,token:response.headers.authorization};// 이런식으로 받아줘도 된다.\n});export const registerRequest=createAsyncThunk(\"user/join\",async data=>{const{email,password,username}=data;const response=await register({email,password,username});return response.data;});//만든 userSlice의 reducer를 export (reducer들은 .actions에 담겨있다.)\nexport const{logout,setUserInfo,setEmail}=userSlice.actions;// src/store/index.js는 export default로 userReducer를 받게 해놨으므로 userSlice의 리듀서도 export\nexport default userSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","login","register","setUserCookie","staticServerUri","process","env","REACT_APP_PATH","initialState","email","loading","token","userSlice","name","reducers","setEmail","state","action","logout","setUserInfo","payload","extraReducers","builder","addCase","loginRequest","pending","fulfilled","tempEmail","tempToken","window","location","href","rejected","alert","error","message","registerRequest","data","password","response","headers","authorization","username","actions","reducer"],"sources":["/Users/master/Desktop/coupon-project/kakaoshop-FE/src/store/slices/userSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { login, register } from \"../../services/api/user\";\nimport { setUserCookie } from \"../../services/cookie\";\n\nconst staticServerUri = process.env.REACT_APP_PATH || \"\";\n\n// 슬라이스를 만들때 주의할 점 : initial state를 꼭 만들어 줘야 한다\nconst initialState = {\n  email: null,\n  loading: false, // 요청을 보냈을 때는 true, 아닌 경우: 요청이 없었거나, 실패했거나, 성공했을 때 false\n  //error: null, // 만약에 에러가 있는 경우에 error.message 값을 담는다. 이런식으로 에러를 처리할 수 있다. 아래 extraReducer의 rejected에서 이용\n  token: null\n}\n\nconst userSlice = createSlice({\n  name: \"user\",\n  initialState,\n  reducers: {\n    setEmail: (state, action) => {\n      // action으로 받은 email 정보를 state로 전달\n      state.email = \"test email\";\n    },\n    logout: (state, action) => {\n      state.email = null;\n      state.token = null;\n    },\n    setUserInfo: (state, action) => {\n      state.email = action.payload.email;\n      state.token = action.payload.token;\n    }\n  },\n  extraReducers: (builder) => {\n    /* loginRequest */\n    // Promise의 pending(대기) 상태 : 이행하지도, 거부하지도 않은 초기 상태\n    builder.addCase(loginRequest.pending, (state, action) => {\n      state.loading = true;\n    });\n    // Promise의 fulfilled(이행) 상태: 연산이 성공적으로 완료됨.\n    builder.addCase(loginRequest.fulfilled, (state, action) => {\n      const [tempEmail, tempToken] = [action.payload.email, action.payload.token]\n      state.loading = false;\n      state.email = tempEmail; // loginRequest의 return 값이 들어가게 됨\n      state.token = tempToken;\n      // add cookie - email, token \n      setUserCookie({email: tempEmail, token: tempToken})\n      window.location.href = staticServerUri+\"/\"; // HomePage로 리디렉션\n    });\n    // Promise의ㅣ rejected(거부): 연산이 실패함\n    builder.addCase(loginRequest.rejected, (state, action) => {\n      state.loading = false;\n      alert(action.error.message)\n      //state.error = action.payload.error.message; //이런 식으로 에러를 담을 수도 있다.\n    });\n\n    /* registerRequest */\n    builder.addCase(registerRequest.pending, (state, action) => {\n      state.loading = true;\n    });\n    builder.addCase(registerRequest.fulfilled, (state, action) => {\n      state.loading = false;\n      window.location.href = staticServerUri+\"/\"; // HomePage로 리디렉션\n      alert(\"회원가입이 완료되었습니다.\")\n    });\n    builder.addCase(registerRequest.rejected, (state, action) => {\n      state.loading = false;\n      alert(action.error.message)\n    });\n  }\n})\n\nexport const loginRequest = createAsyncThunk(\n  \"user/login\",\n  async (data) => {\n    const {email, password} = data;\n    const response = await login({email, password});\n    //return response.data\n    return {\n      email: email,\n      token: response.headers.authorization,\n    }; // 이런식으로 받아줘도 된다.\n  }\n);\nexport const registerRequest = createAsyncThunk(\n  \"user/join\",\n  async (data) => {\n    const {email, password, username} = data;\n    const response = await register({email, password, username});\n    return response.data\n  }\n);\n\n//만든 userSlice의 reducer를 export (reducer들은 .actions에 담겨있다.)\nexport const { logout, setUserInfo, setEmail } = userSlice.actions\n// src/store/index.js는 export default로 userReducer를 받게 해놨으므로 userSlice의 리듀서도 export\nexport default userSlice.reducer;"],"mappings":"AAAA,OAASA,WAAW,CAAEC,gBAAgB,KAAQ,kBAAkB,CAChE,OAASC,KAAK,CAAEC,QAAQ,KAAQ,yBAAyB,CACzD,OAASC,aAAa,KAAQ,uBAAuB,CAErD,KAAM,CAAAC,eAAe,CAAGC,OAAO,CAACC,GAAG,CAACC,cAAc,EAAI,EAAE,CAExD;AACA,KAAM,CAAAC,YAAY,CAAG,CACnBC,KAAK,CAAE,IAAI,CACXC,OAAO,CAAE,KAAK,CAAE;AAChB;AACAC,KAAK,CAAE,IACT,CAAC,CAED,KAAM,CAAAC,SAAS,CAAGb,WAAW,CAAC,CAC5Bc,IAAI,CAAE,MAAM,CACZL,YAAY,CACZM,QAAQ,CAAE,CACRC,QAAQ,CAAEA,CAACC,KAAK,CAAEC,MAAM,GAAK,CAC3B;AACAD,KAAK,CAACP,KAAK,CAAG,YAAY,CAC5B,CAAC,CACDS,MAAM,CAAEA,CAACF,KAAK,CAAEC,MAAM,GAAK,CACzBD,KAAK,CAACP,KAAK,CAAG,IAAI,CAClBO,KAAK,CAACL,KAAK,CAAG,IAAI,CACpB,CAAC,CACDQ,WAAW,CAAEA,CAACH,KAAK,CAAEC,MAAM,GAAK,CAC9BD,KAAK,CAACP,KAAK,CAAGQ,MAAM,CAACG,OAAO,CAACX,KAAK,CAClCO,KAAK,CAACL,KAAK,CAAGM,MAAM,CAACG,OAAO,CAACT,KAAK,CACpC,CACF,CAAC,CACDU,aAAa,CAAGC,OAAO,EAAK,CAC1B,mBACA;AACAA,OAAO,CAACC,OAAO,CAACC,YAAY,CAACC,OAAO,CAAE,CAACT,KAAK,CAAEC,MAAM,GAAK,CACvDD,KAAK,CAACN,OAAO,CAAG,IAAI,CACtB,CAAC,CAAC,CACF;AACAY,OAAO,CAACC,OAAO,CAACC,YAAY,CAACE,SAAS,CAAE,CAACV,KAAK,CAAEC,MAAM,GAAK,CACzD,KAAM,CAACU,SAAS,CAAEC,SAAS,CAAC,CAAG,CAACX,MAAM,CAACG,OAAO,CAACX,KAAK,CAAEQ,MAAM,CAACG,OAAO,CAACT,KAAK,CAAC,CAC3EK,KAAK,CAACN,OAAO,CAAG,KAAK,CACrBM,KAAK,CAACP,KAAK,CAAGkB,SAAS,CAAE;AACzBX,KAAK,CAACL,KAAK,CAAGiB,SAAS,CACvB;AACAzB,aAAa,CAAC,CAACM,KAAK,CAAEkB,SAAS,CAAEhB,KAAK,CAAEiB,SAAS,CAAC,CAAC,CACnDC,MAAM,CAACC,QAAQ,CAACC,IAAI,CAAG3B,eAAe,CAAC,GAAG,CAAE;AAC9C,CAAC,CAAC,CACF;AACAkB,OAAO,CAACC,OAAO,CAACC,YAAY,CAACQ,QAAQ,CAAE,CAAChB,KAAK,CAAEC,MAAM,GAAK,CACxDD,KAAK,CAACN,OAAO,CAAG,KAAK,CACrBuB,KAAK,CAAChB,MAAM,CAACiB,KAAK,CAACC,OAAO,CAAC,CAC3B;AACF,CAAC,CAAC,CAEF,qBACAb,OAAO,CAACC,OAAO,CAACa,eAAe,CAACX,OAAO,CAAE,CAACT,KAAK,CAAEC,MAAM,GAAK,CAC1DD,KAAK,CAACN,OAAO,CAAG,IAAI,CACtB,CAAC,CAAC,CACFY,OAAO,CAACC,OAAO,CAACa,eAAe,CAACV,SAAS,CAAE,CAACV,KAAK,CAAEC,MAAM,GAAK,CAC5DD,KAAK,CAACN,OAAO,CAAG,KAAK,CACrBmB,MAAM,CAACC,QAAQ,CAACC,IAAI,CAAG3B,eAAe,CAAC,GAAG,CAAE;AAC5C6B,KAAK,CAAC,gBAAgB,CAAC,CACzB,CAAC,CAAC,CACFX,OAAO,CAACC,OAAO,CAACa,eAAe,CAACJ,QAAQ,CAAE,CAAChB,KAAK,CAAEC,MAAM,GAAK,CAC3DD,KAAK,CAACN,OAAO,CAAG,KAAK,CACrBuB,KAAK,CAAChB,MAAM,CAACiB,KAAK,CAACC,OAAO,CAAC,CAC7B,CAAC,CAAC,CACJ,CACF,CAAC,CAAC,CAEF,MAAO,MAAM,CAAAX,YAAY,CAAGxB,gBAAgB,CAC1C,YAAY,CACZ,KAAO,CAAAqC,IAAI,EAAK,CACd,KAAM,CAAC5B,KAAK,CAAE6B,QAAQ,CAAC,CAAGD,IAAI,CAC9B,KAAM,CAAAE,QAAQ,CAAG,KAAM,CAAAtC,KAAK,CAAC,CAACQ,KAAK,CAAE6B,QAAQ,CAAC,CAAC,CAC/C;AACA,MAAO,CACL7B,KAAK,CAAEA,KAAK,CACZE,KAAK,CAAE4B,QAAQ,CAACC,OAAO,CAACC,aAC1B,CAAC,CAAE;AACL,CACF,CAAC,CACD,MAAO,MAAM,CAAAL,eAAe,CAAGpC,gBAAgB,CAC7C,WAAW,CACX,KAAO,CAAAqC,IAAI,EAAK,CACd,KAAM,CAAC5B,KAAK,CAAE6B,QAAQ,CAAEI,QAAQ,CAAC,CAAGL,IAAI,CACxC,KAAM,CAAAE,QAAQ,CAAG,KAAM,CAAArC,QAAQ,CAAC,CAACO,KAAK,CAAE6B,QAAQ,CAAEI,QAAQ,CAAC,CAAC,CAC5D,MAAO,CAAAH,QAAQ,CAACF,IAAI,CACtB,CACF,CAAC,CAED;AACA,MAAO,MAAM,CAAEnB,MAAM,CAAEC,WAAW,CAAEJ,QAAS,CAAC,CAAGH,SAAS,CAAC+B,OAAO,CAClE;AACA,cAAe,CAAA/B,SAAS,CAACgC,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}